git config --global user.name tanisha          => inputing our name, tanisha is name 
git config --global user.email tanishamodi12@gmail.com          => inputing our email, tanishamodi12@gmail.com is email 
git config --global user.name                       => printing our name 
git config --global user.name                       => printing our email
code .                          =>opening code ide(vs code )
git init       => initialized empty repo
ls -lart       =>show all hidden files too        ls  =>  show files 
UNtracted /staged /unmodified /modified /staged =>commit ....or remove to untracted 
git status     => show files and their status           git status -s      =>short way to see the status of files
git add 1st.html       => 1st.html goes to staging now ,1st.html is file name 
git add -A             => to get all files in staging area

git commit (vim opens ..type ..I ,Initial commit , esc , :wq ....to exit)   => to commit the file
                            OR
git commit -m "added more htmls"                                            => to commmit files without that vim part


touch file_name          => touch is used to create new, empty file

//we can easily modify files and staged/commit again
//do commit when you are sure about changes you made to files

git checkout file_name     => if file is modified by mistake ...using checkout command ..file can be matched to last commit 
git checkout -f            => for all files
git log                    =>show commits
git log -p -10 --> gives history of last 10 commits, q to (quit)

//q to exit 
git diff               =>compares working file to commited file  
git diff --staged      =>compares staging area to last commited file 
git commit -a -m "skipped staging area and fixed<"     =>to commit file directly (without commiting)
git rm --cached file_name            =>removes file (from staged or commited area but it would still be in untracked area)
git rm                               =>removes file 
touch .gitignore                     =>file which contents the file we want ignore i.e. dont want to push,
                                       we just need to write filenames to be ignored
                                       in file ...if we write .../file_name    =>only files existing in that main folder with same file_name will be ignored
                                       *.txt   => ignore all files with extension .txt 
                                       tanisha/ => ignores folder with name tanisha

we can make new branches to make any changes to any file that the original file remains safe ...we can merge branches when needed                                         
master is the main branch
git branch brnch_name         => for making new branch with name brnch_name 
git checkout brnch_name       => for switchimng to brnch_name branch 
git branch                    => list the branches 
git merge brnch_name          => merges any branch to master branch  (write in master branch)
git checkout -b brnch_name    =>to create and switch to other branch with name brnch_name


create new repo on github
git remote add origin copied_link_from_github_new_repo              =>
git remote origin copied_link_from_github_new_repo                  -->
git remote                                                          =>list remotes ..origin
git remote -V                                                       => links to fetch and push
origin --> name of remote (in future while pushing we dont need to copy link ..just write origin)
git remote set-url origin _link_   --> 

git push -u origin master        => to push files of master branch to github profile to origin(link name)
git push                         --> push files where the files were pushed last time(in last push command)




================================================================
second time learn git : hitesh dsa course
================================================================
git init --> git initialization
dir --> list directories
mkdir --> make new directory
rmdir --> remove directory 
cd --> change directory

ls -->list all files
ls -a -->list all files including hidden files
ls -lart

touch --> create new file
cat --> displays whatever in file

 git config --global user.name tanisha --> setting name
 git config --global user.email ..... -->setting email

git add --> for staging
git add -A --> all files to staging area
green represent staging area 

git commit --> to commit file
(vim will be opened), you have to press i, initial commit,press esp, :wq(to exit)
shortcut to commit --> git commit -m "Added more files"

git checkout --> to match the file to the file of last commit 
git checkout -f --> match all files to the files of previous commit

git log --> gives history of previous commits 
git log -p -10 --> gives history of last 10 commits, q to (quit)

git diff --> compare working dir with staging area
git diff --staged   --> compare staged dir to last commit

 git commit -a -m "skipped staging area" --> directly commit without staging(u must add/stage it at least one time)
 git commit -a -m "skipped staging area and fixed <"

git rm --> removes(delete) dir from staging area
git rm --cached  --> only remove from staging area and not from hard disk
git rm -f --> force remove

git status --> gives record which file is in which state
git status -s --> gives summary in short (red M for modified, green M for staged)

clear --> to clear the terminal

tab --> to autocomplete




















